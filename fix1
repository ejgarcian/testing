/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package edd;

/**
 * Esta clase define un objeto de tipo cola. Contiene una lista de los elementos encolados.
 * 
 * @version 27/10/2024
 * @author Michelle García
 */
public class Cola {
    
    private Lista queue = new Lista();
    private Lista listeners = new Lista();

    /**
     * Procedimiento para encolar un objeto
     * 
     * @param j Objeto a encolar
     */
    public synchronized void enqueue(Object j) {
        getQueue().add(j);
        notifyListeners();
    }

    
    /**
     * Procedimiento para desencolar el primer elemento de la cola
     * 
     * @return Primer elemento de la cola
     */
    public synchronized Object dequeue() {
        if (getQueue().count() > 0) {
            Object value = getQueue().get(0);
            getQueue().remove(0);
            notifyListeners();
            return value;
        }
        return null;
    }

    /**
     * Función para obtener la cantidad de elementos encolados en una cola
     * 
     * @return Cantidad de elementos encolados en la cola actual
     */
    public synchronized int getCount() {
        return getQueue().count();
    }

    /**
     * Función para obtener un objeto según su posición
     * 
     * @param index Posición del objeto dentro de la cola
     * @return Objeto según la posición
     */
    public synchronized Object get(int index) {
        return getQueue().get(index);
    }

    /**
     * Función para obtener la cola actual
     * 
     * @return Cola actual
     */
    public Lista getQueue() {
        return queue;
    }
    
    public synchronized boolean getContains(Object value) {
        return getQueue().contains(value);
    }
    
    // ---------------- Listener API (uses Lista, not java.util) ----------------

    /**
     * Add a listener that will be notified when this Cola changes.
     *
     * @param l the listener to add (ignored if null)
     */
    public synchronized void addListener(QueueChangeListener l) {
        if (l == null) return;
        // avoid duplicates (simple linear scan)
        for (int i = 0; i < listeners.count(); i++) {
            Object existing = listeners.get(i);
            if (existing == l) {
                return; // already registered
            }
        }
        listeners.add(l);
    }

    /**
     * Remove a previously added listener.
     *
     * @param l the listener to remove (ignored if not found or null)
     */
    public synchronized void removeListener(QueueChangeListener l) {
        if (l == null) return;
        int n = listeners.count();
        for (int i = 0; i < n; i++) {
            Object o = listeners.get(i);
            if (o == l || (o != null && o.equals(l))) {
                // use Lista.remove(index)
                listeners.remove(i);
                return;
            }
        }
    }

    /**
     * Notify all registered listeners that this queue changed.
     * Note: keep private but expose fireChange() for controlled public triggering.
     */
    private void notifyListeners() {
        int n = listeners.count();
        // iterate by index to avoid using java.util
        for (int i = 0; i < n; i++) {
            Object o = listeners.get(i);
            if (o instanceof QueueChangeListener) {
                try {
                    ((QueueChangeListener) o).queueChanged(this);
                } catch (Exception ex) {
                    // avoid listener exceptions breaking queue logic
                    System.err.println("Queue listener threw: " + ex);
                    ex.printStackTrace();
                }
            }
        }
    }

    /**
     * Public method to trigger listeners when external code manipulates the
     * internal Lista directly (use sparingly). Prefer using Cola APIs instead.
     */
    public synchronized void fireChange() {
        notifyListeners();
    }
    
    /**
     * Remove item at index (wraps Lista.remove) and notifies listeners.
     *
     * @param index index to remove
     */
    public synchronized void removeAt(int index) {
        getQueue().remove(index);
        notifyListeners();
    }

    /**
     * Remove the first occurrence of an object from the queue (if found).
     * Returns true if removed.
     *
     * @param value value to remove
     * @return true if removed
     */
    public synchronized boolean removeValue(Object value) {
        if (value == null) return false;
        // search for equality by scanning
        int n = getQueue().count();
        for (int i = 0; i < n; i++) {
            Object o = getQueue().get(i);
            if (o == value || (o != null && o.equals(value))) {
                getQueue().remove(i);
                notifyListeners();
                return true;
            } else {
                // also support matching by PCB id / Proceso equality cases
            }
        }
        return false;
    }

    /**
     * Swap two indices in the internal Lista and notify listeners.
     * This is a thread-safe wrapper around Lista.swap().
     *
     * @param i first index
     * @param j second index
     */
    public synchronized void swap(int i, int j) {
        getQueue().swap(i, j);
        notifyListeners();
    }

    /**
     * Take an atomic snapshot of the current queue contents and return as an Object[].
     * Use this for safe UI iteration.
     *
     * @return array copy of current elements (never null)
     */
    public synchronized Object[] snapshot() {
        int n = getQueue().count();
        Object[] arr = new Object[n];
        for (int i = 0; i < n; i++) {
            arr[i] = getQueue().get(i);
        }
        return arr;
    }

    if (p1.getProcessingTime() > p2.getProcessingTime()) {
    readyQueue.swap(i, i + 1); // will notify listeners
    swapped = true;
}

// ... (rest of the class unchanged above)

    public Interface1() {
        initComponents();
        setupScrollContainers();

        registerQueueListeners(); 
        
        // start a Swing Timer to refresh terminated list every 1 second (1000 ms)
        terminatedTimer = new Timer(1000, e -> updateTerminatedArea());
        terminatedTimer.setRepeats(true);
        terminatedTimer.start();
        
        // also do an initial immediate update
        updateTerminatedArea();
        // Run scheduler in background thread (do NOT call startSchedulerBackground on EDT)
        startSchedulerThread();
    }

// ...

    /**
     * Generic refresh helper to rebuild a container from a Cola (queue) that stores PCB objects.
     * This rebuilds the whole container (removeAll + add each item) using an atomic snapshot.
     */
    private void refreshContainerFromQueue(final Cola queue, final JPanel container, final JScrollPane pane) {
        if (queue == null || container == null) {
            return;
        }

        // Take an atomic snapshot off the shared queue to avoid concurrent modification problems
        final Object[] items = queue.snapshot();

        // Now perform all UI updates on the EDT
        javax.swing.SwingUtilities.invokeLater(() -> {
            container.removeAll();

            if (items == null || items.length == 0) {
                container.revalidate();
                container.repaint();
                if (pane != null) {
                    pane.revalidate();
                    pane.repaint();
                }
                return;
            }

            for (int i = 0; i < items.length; i++) {
                Object o = items[i];
                if (o == null) continue;

                PCB pcb;
                if (o instanceof PCB) {
                    pcb = (PCB) o;
                } else {
                    // If stored object is a Proceso, get its PCB
                    if (o instanceof Proceso) {
                        pcb = ((Proceso) o).getPcb();
                    } else {
                        // unknown type: skip
                        continue;
                    }
                }

                PanelProceso p = new PanelProceso(pcb.getMar(), pcb.getPc(), pcb.getId(), pcb.getName(), pcb.getStatus());
                container.add(p);
                container.add(Box.createRigidArea(new Dimension(0, 8)));
            }

            container.revalidate();
            container.repaint();
            if (pane != null) {
                pane.revalidate();
                pane.repaint();
            }
        });
    }


    
}
